json_data[[4]]
json_data[[5]]
json_data[[5]]$journals
closer <- json_data[[5]]
closer[[3]]
closer[
]
closer$journals
closer[[3]]$journals
json_data[[5]][[3]]$journals
# journals published in
journals <- json_data[[5]][[3]]$journals
journals <- as.dataframe(json_data[[5]][[3]]$journals)
journals <- as.data.frame(json_data[[5]][[3]]$journals)
View(journals)
journals <- t(as.data.frame(json_data[[5]][[3]]$journals))
View(journals)
json_data[[6]]
json_data[[5]]
json_data[[7]]
json_data[[8]]
closer <- json_data[[8]]
closer$biblio$title
closer[[]]$biblio$title
closer[[44]]$biblio$title
closer[[1]]$has_metrics
length(closer)
closer[[2]]$has_metrics
closer[[3]]$has_metrics
for i in 1:length(closer){
closer[[i]]$has_metrics
}
for (i in 1:length(closer)){
closer[[i]]$has_metrics
}
i
for (i in 1:length(closer)){
closer[[i]]$has_metrics
}
1:length(closer)
for (i in 1:length(closer)){
print(closer[[i]]$has_metrics)
}
loser[[6]]$has_metrics
closer[[6]]$has_metrics
closer[[6]]
library(xkcd)
install.packages("wesanderson")
library(wesanderson)
# Current list of available palettes
namelist
pal <- wes.palette(name = "Zissou", type = "continuous")
image(volcano, col = pal(21))
pal <- wes.palette(name = "Zissou", type = "continuous")
image(volcano, col = pal(21))
data <- data(volcano)
library(devtools)
source_url('https://gist.github.com/menugget/7689145/raw/dac746aa322ca4160a5fe66c70fec16ebe26faf9/image.scale.2.r')
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
source_url('https://gist.github.com/menugget/7864471/raw/8127dfaae183233d203580bc247a73a564d5feab/plot.stacked.2.R')
set.seed(1)
m <- 500
n <- 30
x <- seq(m)
y <- matrix(0, nrow=m, ncol=n)
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=20)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
library(devtools)
source_url('https://gist.github.com/menugget/7689145/raw/dac746aa322ca4160a5fe66c70fec16ebe26faf9/image.scale.2.r')
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
source_url('https://gist.github.com/menugget/7864471/raw/8127dfaae183233d203580bc247a73a564d5feab/plot.stacked.2.R')
set.seed(1)
m <- 500
n <- 30
x <- seq(m)
y <- matrix(0, nrow=m, ncol=n)
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=20)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
}
y <- replace(y, y<0.01, 0)
#Plot Ex. 1 - Color by max value
pal <- colorRampPalette(c(rgb(0.85,0.85,1), rgb(0.2,0.2,0.7)))
BREAKS <- pretty(apply(y,2,max),8)
LEVS <- levels(cut(1, breaks=BREAKS))
COLS <- pal(length(BREAKS )-1)
z <- val2col(apply(y,2,max), col=COLS)
plot.stacked(x,y, xlim=c(100, 400), ylim=c(0, 1.2*max(apply(y,1,sum), na.rm=TRUE)), yaxs="i", col=z, border="white", lwd=0.5)
library(devtools)
source_url('https://gist.github.com/menugget/7689145/raw/dac746aa322ca4160a5fe66c70fec16ebe26faf9/image.scale.2.r')
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
source_url('https://gist.github.com/menugget/7864471/raw/8127dfaae183233d203580bc247a73a564d5feab/plot.stacked.2.R')
set.seed(1)
m <- 500
n <- 30
x <- seq(m)
y <- matrix(0, nrow=m, ncol=n)
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=20)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
}
y <- replace(y, y<0.01, 0)
#Plot Ex. 1 - Color by max value
pal <- colorRampPalette(c(rgb(0.85,0.85,1), rgb(0.2,0.2,0.7)))
BREAKS <- pretty(apply(y,2,max),8)
LEVS <- levels(cut(1, breaks=BREAKS))
COLS <- pal(length(BREAKS )-1)
z <- val2col(apply(y,2,max), col=COLS)
namelist
namelist[1]
display.wes.palette(4, "GrandBudapest")
namelist[1]
namelist[,1]
namelist[1,]
nrows(namelist)
nrow(namelist)
namelist[1,1]
namelist[1,2]
# loop through showing palettes
for (i in 1:nrow(namelist)){
display.wes.palette(namelist[1,1],
namelist[1,2])
}
namelist[1,1]
namelist[2,1]
namelist[1,1]
namelist[1,2]
namelist[2,2]
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(name_list,
name_movie)
}
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(2,2))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(2,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(5,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(4,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
par(mfrow=c(3,3))
for (i in 1:nrow(namelist)){
name_movie <- namelist[i,1]
number_colours <- namelist[i,2]
display.wes.palette(number_colours,
name_movie)
}
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species)
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species)+
theme_bw()
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species)+
theme_bw()+
scale_color_manual(values = wes.palette(3, "GrandBudapest"))
qplot(Sepal.Length,
Petal.Length,
data = iris,
color = Species,
size = Petal.Width)+
theme_bw()+
scale_color_manual(values = wes.palette(3, "GrandBudapest"))
getHistoricalWeather <- function(airport.code="EGSC", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/7aabf179dc4fb6bb/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
library(RJSONIO)
############################################################################
getHistoricalWeather <- function(airport.code="EGSC", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/7aabf179dc4fb6bb/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
library(plyr)
############################################################################
getHistoricalWeather <- function(airport.code="EGSC", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/7aabf179dc4fb6bb/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
View(hdwd)
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
View(hdwd)
i[1]
i
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
View(hdwd)
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('Cambridge', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
weather.data
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
weather.data$history$dailysummary
library(RJSONIO)
library(plyr)
############################################################################
getHistoricalWeather <- function(airport.code="EGSC", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/7aabf179dc4fb6bb/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
library(RJSONIO)
library(plyr)
############################################################################
getHistoricalWeather <- function(airport.code="EGSC", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/7aabf179dc4fb6bb/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('CBG', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
View(hdwd)
date.range <- seq.Date(from=as.Date('2013-1-01'), to=as.Date('2013-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('CBG', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
View(hdwd)
library(RJSONIO)
library(plyr)
############################################################################
getHistoricalWeather <- function(airport.code="EGSC", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/7aabf179dc4fb6bb/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2012-1-01'), to=as.Date('2014-1-01'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('EGSC', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('CBG', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
View(hdwd)
source('~/funwithcode_local/weather/daily_weather.R', echo=TRUE)
View(hdwd)
library(ggmap)
setwd("~/funwithcode_local/pub_crawl/shinyapp")
google_distances <- read.csv("data/google_distances.csv", stringsAsFactors=F)
jb_difference <- function(latlon_1,latlon_2){
latlon_1 <- strsplit(latlon_1, ",")
latlon_2 <- strsplit(latlon_2, ",")
rad <- pi/180
a1 <- latlon_1[1]*rad
a2 <- latlon_1[2]*rad
b1 <- latlon_2[1]*rad
b2 <- latlon_2[2]*rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.14500001
d <- R * c
return(d)
}
google_distances$crow <- jb_difference(google_distances$latlon_1,google_distances$latlon_2)
jb_difference <- function(latlon_1,latlon_2){
latlon_1 <- strsplit(latlon_1, ",")
latlon_2 <- strsplit(latlon_2, ",")
rad <- pi/180
a1 <- latlon_1[1]*rad
a2 <- latlon_1[2]*rad
b1 <- latlon_2[1]*rad
b2 <- latlon_2[2]*rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.14500001
d <- R * c
return(d)
}
google_distances$crow <- jb_difference(google_distances$latlon_1,google_distances$latlon_2)
jb_difference <- function(latlon_1,latlon_2){
latlon1 <- strsplit(latlon_1, ",")
latlon2 <- strsplit(latlon_2, ",")
rad <- pi/180
a1 <- latlon1[1]*rad
a2 <- latlon1[2]*rad
b1 <- latlon2[1]*rad
b2 <- latlon2[2]*rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.14500001
d <- R * c
return(d)
}
google_distances$crow <- jb_difference(google_distances$latlon_1,google_distances$latlon_2)
latlon1 <- google_distances$latlon_1
latlon1 <- google_distances$latlon_1[1]
strsplit(latlon_1, ",")
latlon1 <- google_distances$latlon1[1]
latlon1 <- google_distances$latlon_1[1]
strsplit(latlon1, ",")
l <- strsplit(latlon1, ",")
l[1]
l[[1]]
l[1,]
l[,1]
l[1]
l[[1]]
l[[1]][1]
jb_difference <- function(latlon_1,latlon_2){
latlon1 <- strsplit(latlon_1, ",")
latlon2 <- strsplit(latlon_2, ",")
rad <- pi/180
a1 <- latlon1[[1]][1]*rad
a2 <- latlon1[[1]][2]*rad
b1 <- latlon2[[1]][1]*rad
b2 <- latlon2[[1]][2]*rad
dlon <- b2 - a2
dlat <- b1 - a1
a <- (sin(dlat/2))^2 + cos(a1) * cos(b1) * (sin(dlon/2))^2
c <- 2 * atan2(sqrt(a), sqrt(1 - a))
R <- 6378.14500001
d <- R * c
return(d)
}
google_distances$crow <- jb_difference(google_distances$latlon_1,google_distances$latlon_2)
google_distances$crow <- apply(google_distances,1,jb_difference(latlon_1,latlon_2))
google_distances$crow <- apply(google_distances,1,jb_difference(google_distances$latlon_1,google_distances$latlon_2))
google_distances$latlon1 <- strsplit(google_distances$latlon_1, ",")
google_distances$latlon2 <- strsplit(google_distances$latlon_2, ",")
google_distances <- read.csv("data/google_distances.csv", stringsAsFactors=F)
latlon1 <- strsplit(google_distances$latlon_1, ",")
latlon2 <- strsplit(google_distances$latlon_2, ",")
latlon1 <- as.matrix(strsplit(google_distances$latlon_1, ","))
latlon2 <- as.matrix(strsplit(google_distances$latlon_2, ","))
View(latlon1)
within(google_distances, one<-data.frame(do.call('rbind', strsplit(as.character(latlon_1), ',', fixed=TRUE))))
google_distances <- within(google_distances, one<-data.frame(do.call('rbind', strsplit(as.character(latlon_1), ',', fixed=TRUE))))
google_distances <- read.csv("data/google_distances.csv", stringsAsFactors=F)
test <- data.frame(do.call('rbind', strsplit(as.character(google_distances$latlon_1),'|',fixed=TRUE)))
